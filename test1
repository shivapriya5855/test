@Library("latest") _

// Shared properties
def project = [
  ait: "2394",
  spk: "CTP",
  repo: "vaultingservice",
  notificationDG: "dg.gmt_ase_devops_eng@bofa.com"
]

// Shared OpenShift credentials
def openshiftCreds = [
  dev: [
    username: "achp2394devops",
    password: "<REDACTED_PASSWORD>"
  ]
]

def unitTest = false
echo "branchName : ${env.BRANCH_NAME}"

def isDevelopBranch = env.BRANCH_NAME.startsWith("develop")
def isFeatureBranch = env.BRANCH_NAME.startsWith("feature/")
def isReleaseBranch = env.BRANCH_NAME.startsWith("release/")
def isMasterBranch  = env.BRANCH_NAME.startsWith("master")

def vBranchName = env.BRANCH_NAME.substring(env.BRANCH_NAME.lastIndexOf('/') + 1)
def buildVersion = vBranchName + "-" + env.BUILD_NUMBER
def branch = env.BRANCH_NAME.split('/')[0]

def deployFlag = false
switch (branch) {
  case 'feature':
    echo 'Feature: deploy = true...'
    deployFlag = true
    break
  case 'develop':
    echo 'Develop: deploy = true ...'
    deployFlag = true
    break
  case 'release':
    echo 'Release: deploy = true ...'
    deployFlag = true
    break
  case 'master':
    echo 'Master: deploy = true ...'
    deployFlag = true
    break
  default:
    echo 'Default: deploy = false ...'
    deployFlag = false
    break
}

// Determine OpenShift Build and Deploy Targets

def openshiftBuildProject = ''
def openshiftURI = ''
def deployClusters = []
def deployProjects = []

switch (branch) {
  case 'develop':
    echo "Detected develop branch: setting OpenShift for DEV"
    openshiftURI = "https://api.useastl6.bofa.com:6443/"
    openshiftBuildProject = "cp-2852679"

    deployClusters = [openshiftURI]
    deployProjects = [openshiftBuildProject]
    break

  case 'release':
    echo "Detected release branch: setting OpenShift for UAT"
    openshiftURI = "https://api.useastl6.bofa.com:6443/" // Build cluster
    openshiftBuildProject = "cp-9125438"

    deployClusters = [
      "https://api.useastl6.bofa.com:6443/",
      "https://api.useast27.bofa.com:6443/"
    ]
    deployProjects = ["cp-9125438", "cp-9125438"]
    break

  default:
    error("Unsupported branch: ${branch}. Exiting...")
}

// OpenShift common values
def openshiftApp = "vaultproxyweb-bc"
def openshiftIMG = "vaultproxyweb-bc"
def version = "0.0.1"

def openshiftStageAgent = "ETASOPENSHIFT"
def openshiftBuildConfig = "manifests/bc.yaml"

def openshiftNonProdServiceId = openshiftCreds.dev.username
def osNonProdEncryptedPassword = openshiftCreds.dev.password

def executeOpenshiftBuild = true

def mavenPipelinePlugin = [
  ait: project.ait,
  spk: project.spk,
  repo: project.repo
]

def openshiftContainerPipelinePlugin = [
  ait: project.ait,
  spk: project.spk,
  repo: project.repo,

  cleanWorkspace: true,
  openshiftNonProdServiceId: openshiftNonProdServiceId,
  osNonProdEncryptedPassword: osNonProdEncryptedPassword,
  openshiftBinPath: "s2i",

  executeOpenshiftBuild: executeOpenshiftBuild,
  openshiftApp: openshiftApp,
  openshiftImageName: openshiftIMG,
  openshiftImageTagPrefix: version,
  openshiftURI: openshiftURI,
  openshiftStageAgent: openshiftStageAgent,
  openshiftBuildProject: openshiftBuildProject,
  openshiftBuildConfig: openshiftBuildConfig,

  executeOpenshiftDeploy: true,
  openshiftDeployProject: openshiftBuildProject,
  openshiftDeployConfig: "manifests/dc.yaml",
  useConfigMap: false,
  useSecret: false,

  executeOpenshiftDeliveryPipeline: true,
  autoKickoffReleaseFlowInXLR: true,
  autoKickoffDeploymentSequencingInXLR: true,
  refreshReleaseTemplatesInXLR: true,
  autoProvisionFeatureBranchTemplateInReleaseOrg: true,
  executeDeploy: deployFlag
]

// Optional: deploy to multiple UAT clusters if release branch
if (branch == 'release') {
  for (int i = 0; i < deployClusters.size(); i++) {
    def deployURI = deployClusters[i]
    def deployProject = deployProjects[i]

    echo "Deploying to UAT cluster: ${deployURI}, project: ${deployProject}"
    // You can invoke a shared step or function here for actual deployment per cluster
  }
}

// XLR config
if (branch == 'feature') {
  releaseConfigLocation = "${project.spk}@vaultingservice_cd@feature/OpenShift_DoE_Roles_PoC_2025@LLEResConfigFile.json"
} else if (branch == 'develop') {
  releaseConfigLocation = "${project.spk}@vaultingservice_cd@feature/OpenShift_DoE_Roles_PoC_2025@LLEResConfigFile.json"
} else if (branch == 'release') {
  releaseConfigLocation = "${project.spk}@vaultingservice_cd@develop@HLEResConfigFile.json"
} else if (branch == 'master') {
  releaseConfigLocation = "${project.spk}@vaultingservice_cd@master@HLEResConfigFile.json"
}
